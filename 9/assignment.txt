1. Try to break code by playing with array and string length.
2. Get rid of initializers that set up name.
3. Accidentally set name[3] = 'A'; so that there is not terminator.
4. Accidentally set name[4] = 'Z'; and see what error you get and what type of error it is.
5. Ser the initializer to {'a', 'a', 'a', 'a'}; so that there are too many 'a' characters and no space for the '\0' terminator.
6. Use loop instead of individually printing each element of an array.
7. Assign the characters into numbers, and then use printf to print them one character at a time. What kind of compiler warnings do you get?
8. Do the inverse of name, trying to treat it like an array of int and print it out one int at a time.
9. In how many other ways can you print this out?
10. If an array of characters is 4 bytes long, and an integer is 4 bytes long, then can you treat the whole name array like it's just an integer? How might you accomplish this crazy hack?
11. Take out a piece of paper and draw each of these arrays as a row of boxes. Then do the operations you just did on paper to see if you get them right.
12. Convert name to be in the style of another and see if the code keeps working.

